// Code generated by counterfeiter. DO NOT EDIT.
package playfakes

import (
	"sync"

	"github.com/desmondrawls/rock-paper-scissors/play"
)

type UISpy struct {
	WinnerStub        func(string)
	winnerMutex       sync.RWMutex
	winnerArgsForCall []struct {
		arg1 string
	}
	DrawStub           func()
	drawMutex          sync.RWMutex
	drawArgsForCall    []struct{}
	InvalidStub        func(play.Inputs)
	invalidMutex       sync.RWMutex
	invalidArgsForCall []struct {
		arg1 play.Inputs
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *UISpy) Winner(arg1 string) {
	fake.winnerMutex.Lock()
	fake.winnerArgsForCall = append(fake.winnerArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Winner", []interface{}{arg1})
	fake.winnerMutex.Unlock()
	if fake.WinnerStub != nil {
		fake.WinnerStub(arg1)
	}
}

func (fake *UISpy) WinnerCallCount() int {
	fake.winnerMutex.RLock()
	defer fake.winnerMutex.RUnlock()
	return len(fake.winnerArgsForCall)
}

func (fake *UISpy) WinnerArgsForCall(i int) string {
	fake.winnerMutex.RLock()
	defer fake.winnerMutex.RUnlock()
	return fake.winnerArgsForCall[i].arg1
}

func (fake *UISpy) Draw() {
	fake.drawMutex.Lock()
	fake.drawArgsForCall = append(fake.drawArgsForCall, struct{}{})
	fake.recordInvocation("Draw", []interface{}{})
	fake.drawMutex.Unlock()
	if fake.DrawStub != nil {
		fake.DrawStub()
	}
}

func (fake *UISpy) DrawCallCount() int {
	fake.drawMutex.RLock()
	defer fake.drawMutex.RUnlock()
	return len(fake.drawArgsForCall)
}

func (fake *UISpy) Invalid(arg1 play.Inputs) {
	fake.invalidMutex.Lock()
	fake.invalidArgsForCall = append(fake.invalidArgsForCall, struct {
		arg1 play.Inputs
	}{arg1})
	fake.recordInvocation("Invalid", []interface{}{arg1})
	fake.invalidMutex.Unlock()
	if fake.InvalidStub != nil {
		fake.InvalidStub(arg1)
	}
}

func (fake *UISpy) InvalidCallCount() int {
	fake.invalidMutex.RLock()
	defer fake.invalidMutex.RUnlock()
	return len(fake.invalidArgsForCall)
}

func (fake *UISpy) InvalidArgsForCall(i int) play.Inputs {
	fake.invalidMutex.RLock()
	defer fake.invalidMutex.RUnlock()
	return fake.invalidArgsForCall[i].arg1
}

func (fake *UISpy) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.winnerMutex.RLock()
	defer fake.winnerMutex.RUnlock()
	fake.drawMutex.RLock()
	defer fake.drawMutex.RUnlock()
	fake.invalidMutex.RLock()
	defer fake.invalidMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *UISpy) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ play.UI = new(UISpy)

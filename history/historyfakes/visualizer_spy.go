// Code generated by counterfeiter. DO NOT EDIT.
package historyfakes

import (
	"sync"

	"github.com/desmondrawls/rock-paper-scissors/history"
	"github.com/desmondrawls/rock-paper-scissors/models"
)

type VisualizerSpy struct {
	EmptyStub          func()
	emptyMutex         sync.RWMutex
	emptyArgsForCall   []struct{}
	ErrorStub          func()
	errorMutex         sync.RWMutex
	errorArgsForCall   []struct{}
	RecordsStub        func([]models.Record)
	recordsMutex       sync.RWMutex
	recordsArgsForCall []struct {
		arg1 []models.Record
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *VisualizerSpy) Empty() {
	fake.emptyMutex.Lock()
	fake.emptyArgsForCall = append(fake.emptyArgsForCall, struct{}{})
	fake.recordInvocation("Empty", []interface{}{})
	fake.emptyMutex.Unlock()
	if fake.EmptyStub != nil {
		fake.EmptyStub()
	}
}

func (fake *VisualizerSpy) EmptyCallCount() int {
	fake.emptyMutex.RLock()
	defer fake.emptyMutex.RUnlock()
	return len(fake.emptyArgsForCall)
}

func (fake *VisualizerSpy) Error() {
	fake.errorMutex.Lock()
	fake.errorArgsForCall = append(fake.errorArgsForCall, struct{}{})
	fake.recordInvocation("Error", []interface{}{})
	fake.errorMutex.Unlock()
	if fake.ErrorStub != nil {
		fake.ErrorStub()
	}
}

func (fake *VisualizerSpy) ErrorCallCount() int {
	fake.errorMutex.RLock()
	defer fake.errorMutex.RUnlock()
	return len(fake.errorArgsForCall)
}

func (fake *VisualizerSpy) Records(arg1 []models.Record) {
	var arg1Copy []models.Record
	if arg1 != nil {
		arg1Copy = make([]models.Record, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.recordsMutex.Lock()
	fake.recordsArgsForCall = append(fake.recordsArgsForCall, struct {
		arg1 []models.Record
	}{arg1Copy})
	fake.recordInvocation("Records", []interface{}{arg1Copy})
	fake.recordsMutex.Unlock()
	if fake.RecordsStub != nil {
		fake.RecordsStub(arg1)
	}
}

func (fake *VisualizerSpy) RecordsCallCount() int {
	fake.recordsMutex.RLock()
	defer fake.recordsMutex.RUnlock()
	return len(fake.recordsArgsForCall)
}

func (fake *VisualizerSpy) RecordsArgsForCall(i int) []models.Record {
	fake.recordsMutex.RLock()
	defer fake.recordsMutex.RUnlock()
	return fake.recordsArgsForCall[i].arg1
}

func (fake *VisualizerSpy) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.emptyMutex.RLock()
	defer fake.emptyMutex.RUnlock()
	fake.errorMutex.RLock()
	defer fake.errorMutex.RUnlock()
	fake.recordsMutex.RLock()
	defer fake.recordsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *VisualizerSpy) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ history.Visualizer = new(VisualizerSpy)
